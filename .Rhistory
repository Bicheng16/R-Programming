y <- 10:12
cbind(x,y)
rbind(x,y)
x <- 1:3
y <- 10:12
cbind(x,y)  # x, y are both column vectors and horizontally concatenated
rbind(x,y) # x, y are both row vectors and vertically concatenated
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
x
x
table(x)
unclass(x) # encode it
x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes", "no"))
x
x <- NA
x
x <- NaN
x
x <- c(1,2,NA,10,3)
X
x
is.na(x)
is.nan(x) # fails
x <- c(1,2,NAN,10,3)
is.na(x) # works: FALSE FALSE  TRUE FALSE FALSE
is.nan(x) # fails: FALSE FALSE FALSE FALSE FALSE
x <- c(1,2,NaN,10,3)
is.na(x) # works: FALSE FALSE  TRUE FALSE FALSE
is.nan(x) # fails: FALSE FALSE FALSE FALSE FALSE
x <- c(1,2,NaN,NA, 10,3)
is.na(x) # works: FALSE FALSE  TRUE FALSE FALSE
is.nan(x) # works: FALSE FALSE  TRUE FALSE FALSE
ls
x <- read.csv("example.csv")
x <- read.csv("example.csv")
pwd()
getwd()
x <- read.csv("../ds-student/r-programming/example.csv")
x
x <- read.csv("../ds-student/r-programming/example.csv")
x
x <- read.table("../ds-student/r-programming/example.csv")
x
1e5
x <- data.frame(ID = 1:3, Balance = c(1000, 250000, 300))
x
rown.names
rown.names(x)
nrows(x)
nrow(x)
ncol(x)
x <- data.frame(ID = 1:3, Balance = c(1000, 250000, 300))
nrow(x)
ncol(x)
x
x <- data.frame(ID = c("James", "Dylan", "Rod"), Balance = c(1000, 250000, 300))
nrow(x)
ncol(x)
x
data.matrix(x)
x <- read.csv("../ds-student/r-programming/example.csv")
nrow(x)
ncol(x)
data.matrix(x)
x
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
x
x <- list(a=1, b=2, c=3)
x
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
x
m <- matrix(1:4, nrow=2, ncol=2)
dimnames(m) <- list(c("a","b"),c("c","d"))
m
read.table
data <- read.table("../ds-student/r-programming/example.txt")
ls
getwd()
data <- read.table("../ds-student/r-programming/example.txt")
data <- read.table(file="../ds-student/r-programming/example.txt", sep=",")
data
data <- read.table(file="../ds-student/r-programming/example.txt", sep=",")
data <- read.table(file="../ds-student/r-programming/example.txt", sep=",", skip=3, comment.char = "#")
data
data2 <- read.table(file="../ds-student/r-programming/example.txt", sep=",", skip=3)
data2
# Specify delimiter, # of lines skipped at beginning, and comment chars
data1 <- read.table(file="../ds-student/r-programming/example.txt", sep=",", skip=3, comment.char = "#")
# Automatically skip lines beginning with #
data2 <- read.table(file="../ds-student/r-programming/example.txt", sep=",", skip=3)
# read.csv is identical to read.table except that the default separator is a comma
data3 <- read.csv("../ds-student/r-programming/example.csv")
data1
data2
data3
wc
data2
data4 <- read.table(file="../ds-student/r-programming/example.txt",
sep=",", skip=3, colClasses = c("integer", "integer", "integer", "integer"))
data4 <- read.table(file="../ds-student/r-programming/example.txt",
sep=",", skip=3, colClasses = c("numeric", "numeric", "numeric", "numeric"))
data1 <- read.table(file="../ds-student/r-programming/example.txt",
header=TRUE, sep=",", skip=3, comment.char = "#")
# Automatically skip lines beginning with #
data2 <- read.table(file="../ds-student/r-programming/example.txt",
header=TRUE, sep=",", skip=3)
data1
data2
data4 <- read.table(file="../ds-student/r-programming/example.txt", header=TRUE,
sep=",", skip=3, colClasses = c("numeric", "numeric", "numeric", "numeric"))
data4
data4
data4 <- read.table(file="../ds-student/r-programming/example.txt", header=TRUE, nrows = 3,
sep=",", skip=3, colClasses = c("numeric", "numeric", "numeric", "numeric"))
data4
data4 <- read.table(file="../ds-student/r-programming/example.txt", header=TRUE, nrows = 2,
sep=",", skip=3, colClasses = c("numeric", "numeric", "numeric", "numeric"))
data4
data4 <- read.table(file="../ds-student/r-programming/example.txt", header=TRUE, nrows = 100,
sep=",", skip=3, colClasses = c("numeric", "numeric", "numeric", "numeric"))
data4
x <- data.frame(ID = c("James", "Dylan", "Rod"), Balance = c(1000, 250000, 300))
nrow(x)
ncol(x)
data.matrix(x)
str(file)
con <- file("foo.txt", "r")
con <- file("foo.txt", "r")
getwd()
con <- file("../ds-student/r-programming/foo.txt", "r")
ls
con <- file("../ds-student/r-programming/foo.txt", "r")
con <- file("../ds-student/r-programming/foo.txt", "r")
data <- read.csv(con)
close con
con <- file("../ds-student/r-programming/foo.txt", "r")
data <- read.csv(con)
close(con)
data
ls
data
con <- file("../ds-student/r-programming/foo.txt", "r")
data <- read.csv(con, header=F)
close(con)
data
con <- file("../ds-student/r-programming/foo.txt", "r")
data <- read.csv(con, header=F, sep=" ")
close(con)
data
data <- read.csv("../ds-student/r-programming/foo.txt")
data
clear
data
data <- read.csv("../ds-student/r-programming/foo.txt", header=F, sep=" ")
data
con <- url("https://www.tamu.edu/")
x <- readLines(con)
head(x)
con <- url("https://en.wikipedia.org/wiki/Shale_oil_extraction")
x <- readLines(con)
head(x)
x
x<-3
x
con <- url("https://en.wikipedia.org/wiki/Shale_oil_extraction")
x <- readLines(con)
head(x)
x <- c("a", "b", "c", "c", "d", "a")
x[1]
x[2]
x[1:4]
x[2]
x[3]
x[4]
x[x > "a"]
exit
exit()
x <- list(foo=1:4, bar=0.6)
x[1]
x$foo
x[[foo]]
x[["foo""]]
2
3
x <- list(foo=1:4, bar=0.6)
x
x[1]
x <- list(foo=1:4, bar=0.6)
x[1]
x$foo
x["bar"]
x[["bar"]]
x[[1]]
x[["foo"]]
x[["foo"]]+1
x$foo+1
x$foo
x[1]
x["foo"]
x[1]
x[2]
x$foo
x[[1]]
x[["foo"]]
x <- c(x, baz = "hello")
x
x[c(1,3)]
x[c(2,:)]
x[c(2,)]
x[2]
x <- list(a = list(10,12,14), b=c(3.14,2.81))
x
x$b[1]
x$b[2]
x$b
x$a
x <- c("a", "b", "c", "c", "d", "a")
x[1]
x[2]
x[1:4]
x[x > "a"]
x <- matrix(1:6, 2, 3)
x <- matrix(1:6, 2, 3)
x
x[1,2]
x[2,1]
x[1,2]
x
# Get whole row
x[1,]
# Get whole col
x[,2]
y <- cbind(x,x)
y
y[, 3:5]
x[1,2,drop=FALSE] # drop defaultly = TRUE; if turn off, return as a matrix of 1x1
x[1,2]
y[, 3:5, drop=FALSE]
y[, 3:5]
y[, 5]
y[, 5, drop=FALSE]
x <- list(aardvar = 1:5)
x$a
x[["a"]]
x[["a", exact = FALSE]]
x <- c(1,2,NA,4,NA,5)
X
x
bad <- is.na(x)
bad
x <- c(1,2,NA,4,NA,5)
bad <- is.na(x)
x[!bad]  # ! is "not" logical operator
x[!bad]  # ! is "not" logical operator
y <- c("a","b",NA,"d",NA,"f")
good <- complete.cases(x)
good
!bad
good <- complete.cases(x, y)
good <- complete.cases(x, y)
x[good]
y[good]
# Element-wise operation: +,-,*,/,<,> etc.
x <- 1:4; y<- 6:9
x + y
x > 2
y == 8
x * y
x / y
x <- matrix(1:4, 2, 2)
y <- matrix(rep(10,4), 2, 2)
x
y
x <- matrix(1:4, 2, 2)
y <- matrix(rep(10,4), 2, 2)
x * y
x %*% y # True matrix multiplication
x <- 4L
typeof(x)
x <- c(4,TRUE)
typeof(x)
x <- 1:4
y <- 2
x + y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x>10] <- 4
x
data3 <- read.csv("../ds-student/r-programming/hw1_data.csv")
date3
data3
data <- read.csv("../ds-student/r-programming/hw1_data.csv")
head(data)
dim.data.frame(data)
data[152:153][]
data[152:153,]
data[47,]
good <- complete.cases(data)
good
table(is.na(data))
bad <- is.na(data$Ozone)
bad
bad <- sum(is.na(data$Ozone))
bad
mean(data$Ozone(!bad))
mean(data$Ozone[!bad])
good <- complete.cases(data$Ozone)
mean(data$Ozone[good])
mean(data$Ozone[!bad])
good <- complete.cases(data$Ozone)
mean(data$Ozone[good])
a <- data$Ozone > 31
a
data$Ozone > 31
good <- complete.cases(data$Ozone > 31, data$Temp > 90)
good <- complete.cases(data$Ozone > 31, data$Temp > 90)
mean(data$Solar.R[good])
good
good <- complete.cases(data$Ozone > 31, data$Temp > 90, !is.na(data$Solar.R))
good <- complete.cases(data$Ozone > 31, data$Temp > 90, !is.na(data$Solar.R))
mean(data$Solar.R[good])
data$Solar.R[good]
good <- complete.cases(data$Ozone > 31, data$Temp > 90)
mean(data$Solar.R[good])
data$Solar.R[good]
good <- complete.cases(data$Solar.R[good])
data$Solar.R[good]
good <- complete.cases(data$Ozone > 31, data$Temp > 90)
good <- complete.cases(data$Solar.R[good])
data$Solar.R[good]
good <- complete.cases(data$Ozone)
data$Ozone[good]
good <- complete.cases(data$Ozone > 31, data$Temp > 90)
data1 <- data$Solar.R[good]
data1
good <- complete.cases(data1)
good <- complete.cases(data$Ozone > 31, data$Temp > 90)
data1 <- data$Solar.R[good]
good <- complete.cases(data1)
mean(data1)
good <- complete.cases(data$Ozone > 31, data$Temp > 90)
data1 <- data$Solar.R[good]
good <- complete.cases(data1)
mean(data1[good])
good <- complete.cases(data$Ozone >= 31, data$Temp >= 90)
data1 <- data$Solar.R[good]
good <- complete.cases(data1)
mean(data1[good])
mean(data$Temp[data$Month == 6])
max(data$Ozone[data$Month == 5])
data$Ozone[data$Month == 5]
1 != NA
max(data$Ozone[is.nan(data$Ozone[data$Month == 5])])
max(data$Ozone[!is.nan(data$Ozone[data$Month == 5])])
bad <- is.nan(data$Ozone[data$Month == 5])
bad
data$Ozone[!bad]
good <- complete.cases(data$Ozone[data$Month == 5])
good
max(data$Ozone[good])
data$Ozone[good]
good
data$Ozone[data$Month == 5]
is.na(data$Ozone[data$Month == 5])
max(data$Ozone[data$Month == 5] == FALSE)
max(data$Ozone[data$Month == 5] == TRUE)
A <- data$Ozone[data$Month == 5]
good <- complete.cases(A)
A <- data$Ozone[data$Month == 5]
good <- complete.cases(A)
max(A[good])
max(data$Ozone[data$Month == 5] == TRUE)
x <- 4
typeof(x)
data <- read.csv("../ds-student/r-programming/hw1_data.csv")
head(data)
dim.data.frame(data)
tail(data)
data[47,]
bad <- is.na(data$Ozone)
badcount <- sum(bad)
badcount
good <- complete.cases(data$Ozone)
mean(data$Ozone[good])
good <- complete.cases(data$Ozone >= 31, data$Temp >= 90)
data1 <- data$Solar.R[good]
good <- complete.cases(data1)
mean(data1[good])
mean(data$Temp[data$Month == 6])
A <- data$Ozone[data$Month == 5]
good <- complete.cases(A)
max(A[good])
install.packages("swirl")
packageVersion("swirl")
library(swirl)
ls()
ls()
ls()
rm(list=ls())
ls()
install_from_swirl("R Programming")
swirl()
1
11
swirl()
5+7
x < 5+7
x <- 5+7
x
y <- x-3
y
x <- vector("numeric", length = 10)
x <- c(1,2,3,4,5,6)
info()
z <- c(1.1, 9, 3,14)
z
x
info()
skip()
?c
z
z <- c(z, 555)
c(z, 555, z)
z * 2 + 100
sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 100
c(1,2,3,4) + c(0,10,100)
z * 2 + 100
c(1,2,3,4) + c(0,10,100)
c(1,2,3,4) + c(0,10,100)
z+2
z * 2 + 100
z+2
my_div
z+2
c(1,2,3,4) + c(0,10,100)
skip()
my_div
rm(ls())
rm(list=ls())
swirl()
swirl()
install.packages("swirl")
# Check version
packageVersion("swirl")
# 2. Load swirl
# Every time you want to use swirl, you need to first load the package. From the R console:
library(swirl)
# 3. Install the R Progroamming course
# swirl offers a variety of interactive courses, but for our purposes,
# you want the one called R Programming. Type the following from the R
# prompt to install this course:
install_from_swirl("R Programming")
# 4. Start swirl and complete the lessons
# Type the following from the R console to start swirl:
swirl()
getwd()
ls()
x <- 9
ls()
dir()
getwd()
dir()
list.files()
?list.files()
?list.files
args(list.files())
args(list.files
)
old.dir <- getwd()
testdir <- dir.create()
testdir <- dir.create(getwd())
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
files.info("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R", "mytest2.R")
list.files()
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
list.files()
file.path("folder1")
?file.path
info()
skip()
skip()
dir.create("testdir3")
list.files()
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
list.files()
setwd(old.dir)
1:20
pi:10
rm(list=ls())
getwd()
setwd("../ds-student")
15:1
